package net.learner.practice.parser;

import java_cup.runtime.*;
import java.util.ArrayList;
import net.learner.practice.Shape;

parser code
{:
	public ArrayList<Shape> shapes = new ArrayList<>();

	public boolean hasUnRecoveredSyntaxError = false;

	public void syntax_error(Symbol cur_token) {
		// System.err.println("syntax_error " + cur_token );
		// nothing to do, just to avoid native syntax_error method.
	}

	public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
		// System.err.println("unrecovered_syntax_error:" + s);
		// nothing to do.
		this.hasUnRecoveredSyntaxError = true;
	}
:}

terminal

    // single characters
    plus,
    minus,
    multiplication,
    division,
    oParen,
    cParen,
    comma,

    // single words
    graph,
    circle,
    square,
    rectangle,
    line,
    polygon
    ;

terminal Double integer;

terminal String
    blue,
    red,
    green,
    yellow,
    orange,
    purple,
    brown,
    black
    ;

non terminal
    COMPONENTS,
    COMPONENT,
    IN_COMPONENT,
    CIRCLE,
    SQUARE,
    RECTANGLE,
    LINE,
    POLYGON
    ;

non terminal Double EXPR;

non terminal String COLOR;

precedence left plus, minus;
precedence left multiplication, division;

start with COMPONENTS;

COMPONENTS::=   COMPONENT
                | COMPONENTS COMPONENT;

COMPONENT::= graph IN_COMPONENT;

IN_COMPONENT::=   CIRCLE
                | SQUARE
                | RECTANGLE
                | LINE
                | POLYGON;

CIRCLE::=   circle oParen EXPR:e1 comma EXPR:e2 comma EXPR:e3 comma COLOR:color cParen {:
    Shape shape = new Shape();
    shape.setType("circle");
    shape.setColor(color);
    shape.addValue(e1);
    shape.addValue(e2);
    shape.addValue(e3);
    this.parser.shapes.add(shape);
:};

SQUARE::=   square oParen EXPR:e1 comma EXPR:e2 comma EXPR:e3 comma COLOR:color cParen {:
    Shape shape = new Shape();
    shape.setType("square");
    shape.setColor(color);
    shape.addValue(e1);
    shape.addValue(e2);
    shape.addValue(e3);
    this.parser.shapes.add(shape);
:};

RECTANGLE::=    rectangle oParen EXPR:e1 comma EXPR:e2 comma EXPR:e3 comma EXPR:e4 comma COLOR:color cParen {:
    Shape shape = new Shape();
    shape.setType("rectangle");
    shape.setColor(color);
    shape.addValue(e1);
    shape.addValue(e2);
    shape.addValue(e3);
    shape.addValue(e4);
    this.parser.shapes.add(shape);
:};

LINE::= line oParen EXPR:e1 comma EXPR:e2 comma EXPR:e3 comma EXPR:e4 comma COLOR:color cParen {:
    Shape shape = new Shape();
    shape.setType("line");
    shape.setColor(color);
    shape.addValue(e1);
    shape.addValue(e2);
    shape.addValue(e3);
    shape.addValue(e4);
    this.parser.shapes.add(shape);
:};

POLYGON::=  polygon oParen EXPR:e1 comma EXPR:e2 comma EXPR:e3 comma EXPR:e4 comma EXPR:e5 comma COLOR:color cParen {:
    Shape shape = new Shape();
    shape.setType("polygon");
    shape.setColor(color);
    shape.addValue(e1);
    shape.addValue(e2);
    shape.addValue(e3);
    shape.addValue(e4);
    shape.addValue(e5);
    this.parser.shapes.add(shape);
:};


COLOR::=    blue:blue       {: RESULT = blue; :}
            | red:red       {: RESULT = red; :}
            | green:green   {: RESULT = green; :}
            | yellow:yellow {: RESULT = yellow; :}
            | orange:orange {: RESULT = orange; :}
            | purple:purple {: RESULT = purple; :}
            | brown:brown   {: RESULT = brown; :}
            | black:black   {: RESULT = black; :}
            ;


EXPR::= EXPR:e1 plus EXPR:e2                {: RESULT = e1 + e2; :}
        | EXPR:e1 minus EXPR:e2             {: RESULT = e1 - e2; :}
        | EXPR:e1 multiplication EXPR:e2    {: RESULT = e1 * e2; :}
        | EXPR:e1 division EXPR:e2          {: RESULT = e1 / e2; /* if e2 === 0. semantic error, the life if to short to worry about it.*/:}
        | oParen EXPR:e cParen              {: RESULT = e; :}
        | integer:n                         {: RESULT = n; :}
        ;


